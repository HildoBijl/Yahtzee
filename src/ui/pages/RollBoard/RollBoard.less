@import '../../params.less';

// General RollBoard style.
.rollBoard {
  position: relative;

  .keepBar {
    background-color: 1.5*@bgColor;
    background-image: linear-gradient(140deg, @keepBarColor, @keepBarColor*0.85);
    border-top: 3px solid 0.86*@keepBarBorder;
    border-right: 3px solid 1.08*@keepBarBorder;
    border-bottom: 3px solid 1.11*@keepBarBorder;
    border-left: 3px solid 0.90*@keepBarBorder;
    border-radius: 20px;
    color: white;
    left: 50%;
    position: absolute;
    transform: translate(-50%, 0);

    &::after {
      content: "Keep";
      left: 50%;
      position: absolute;
      top: 3px;
      transform: translate(-50%, 0);
    }
  }

  .diceContainer {
    left: 50%;
    height: 0;
    position: absolute;
    top: 0%;
    transform: translate(-50%, 0);
    width: 0;
    z-index: 10;

    .dice {
      position: absolute;
    }
  }

  .rollButton {
    left: 50%;
    transform: translate(-50%, 0);
    position: absolute;
  }
}

// Positioning style for phones.
@media @phone {
  @keepBarTop: 140px;

  .rollBoard {
    height: 262px;

    .keepBar {
      height: 110px;
      top: @keepBarTop;
      width: ~"calc(100% - 20px)";
    }

    .rollButton {
      top: @keepBarTop - 46px;
    }

    // Give the dice the correct top-coordinate.
    .dice.unselected {
      top: 20px;
    }
    .dice.selected {
      top: @keepBarTop + 40px;
    }

    // Give the dice the correct left-coordinate.
    .leftCoordinateStyle(12px, @diceSizeSmall);
  }
}

// Positioning style for larger screens.
@media @desktop {
  @keepBarTop: 168px;

  .rollBoard {
    height: 314px;

    .keepBar {
      height: 126px;
      top: @keepBarTop;
      width: ~"calc(100% - 40px)";
    }

    .rollButton {
      top: @keepBarTop - 46px;
    }

    // Give the dice the correct top-coordinate.
    .dice.unselected {
      top: 30px;
    }
    .dice.selected {
      top: @keepBarTop + 44px;
    }

    // Give the dice the correct left-coordinate.
    .leftCoordinateStyle(24px, @diceSizeLarge);
  }
}

// And here is the mixin for generating the correct style for the left-coordinate.
.leftCoordinateStyle(@diceSeparation, @diceSize) {
  // Loop through all the numbers of dice (5,4,3,2,1,0) that may have been selected.
  .selectedLoop (@numSelected) when (@numSelected >= 0) {
    &.selected@{numSelected} {
      // Iterate over unselected classes.
      .diceUnselectedLoop (@i) when (@i >= 0) {
        .dice.unselected@{i} {
          left: (@i - (5 - @numSelected - 1)/2) * @diceSeparation + (@i - (5 - @numSelected)/2) * @diceSize;
        }
        .diceUnselectedLoop(@i - 1);
      }
      .diceUnselectedLoop(5 - 1 - @numSelected);

      // Iterate over selected classes.
      .diceSelectedLoop (@i) when (@i >= 0) {
        .dice.selected@{i} {
          left: (@i - (@numSelected - 1)/2) * @diceSeparation + (@i - @numSelected/2) * @diceSize;
        }
        .diceSelectedLoop(@i - 1);
      }
      .diceSelectedLoop(@numSelected - 1);
    }
    .selectedLoop(@numSelected - 1);
  }
  .selectedLoop(5);
}
